# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CurveNumberGenerator
                                 A QGIS plugin
 This plugin generates a Curve Number layer for the given Area of Interest within the contiguous United States. It can also download Soil, Land Cover, and Impervious Surface datasets for the same area.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-06
        copyright            : (C) 2021 by Abdul Raheem Siddiqui
        email                : mailto:ars.work.ce@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import inspect
import codecs
import os
import processing
from qgis.PyQt.QtGui import QIcon
from qgis.core import (
    QgsApplication,
    QgsProcessing,
    QgsProcessingParameterFeatureSource,
    QgsProcessingMultiStepFeedback,
    QgsProcessingParameterVectorLayer,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterDefinition,
    QgsCoordinateReferenceSystem,
    QgsExpression,
    QgsVectorLayer,
    QgsField,
    QgsFeature,
    QgsProcessingException,
    QgsProcessingOutputHtml,
    QgsProcessingParameterRasterDestination,
    QgsProcessingParameterVectorDestination,
)

from tempfile import NamedTemporaryFile

from curve_number_generator.processing.tools.utils import (
    checkAreaLimits,
    createRequestBBOXDim,
    downloadFile,
    gdalWarp,
    getExtent,
    getExtentArea,
    reprojectLayer,
)
from curve_number_generator.processing.config import CONUS_NLCD_SSURGO
from curve_number_generator.processing.curve_number_generator_algorithm import (
    CurveNumberGeneratorAlgorithm,
)


cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
sys.path.append(cmd_folder)
qgis_settings_path = QgsApplication.qgisSettingsDirPath().replace("\\", "/")
cn_log_path = os.path.join(qgis_settings_path, "curve_number_generator.log")

__author__ = "Abdul Raheem Siddiqui"
__date__ = "2021-08-04"
__copyright__ = "(C) 2021 by Abdul Raheem Siddiqui"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

curr_version = "1.3"


class ConusNlcdSsurgo(CurveNumberGeneratorAlgorithm):

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = "OUTPUT"
    INPUT = "INPUT"

    def initAlgorithm(self, config=None):

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                "aoi",
                "Area of Interest",
                types=[QgsProcessing.TypeVectorPolygon],
                defaultValue=None,
            )
        )
        param = QgsProcessingParameterVectorLayer(
            "CnLookup",
            "Lookup Table",
            optional=True,
            types=[QgsProcessing.TypeVector],
            defaultValue="",
        )
        param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(param)
        param = QgsProcessingParameterBoolean(
            "drainedsoilsleaveuncheckedifnotsure",
            "Drained Soils? [leave unchecked if not sure]",
            defaultValue=False,
        )
        param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(param)
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                "NLCDLandCover",
                "NLCD Land Cover",
                optional=True,
                createByDefault=False,
                defaultValue=None,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                "NLCDImpervious",
                "NLCD Impervious Surface",
                optional=True,
                createByDefault=False,
                defaultValue=None,
            )
        )              
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                "Soils",
                "Soils",
                optional=True,
                createByDefault=False,
                defaultValue=None,
            )
        )  
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                "CurveNumber",
                "Curve Number",
                optional=True,
                createByDefault=False,
                defaultValue=None,
            )
        )

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(25, model_feedback)
        results = {}
        outputs = {}



        # Assiging Default CN_Lookup Table
        if parameters["CnLookup"] == None:
            csv_uri = (
                "file:///"
                + os.path.join(cmd_folder, "default_lookup.csv")
                + "?delimiter=,"
            )
            csv = QgsVectorLayer(csv_uri, "default_lookup.csv", "delimitedtext")
            parameters["CnLookup"] = csv

        area_layer = self.parameterAsVectorLayer(parameters, "aoi", context)
        orig_epsg_code = (
            area_layer.crs().authid()
        )  # preserve orignal epsg_code to project back to it

        # Reproject layer to EPSG:5070
        outputs["ReprojectLayer5070"] = reprojectLayer(
            parameters["aoi"],
            QgsCoordinateReferenceSystem("EPSG:5070"),
            context=context,
            feedback=feedback,
        )
        area_layer = context.takeResultLayer(outputs["ReprojectLayer5070"])

        epsg_code = area_layer.crs().authid()

        step = 1
        feedback.setCurrentStep(step)
        if feedback.isCanceled():
            return {}

        area_acres = getExtentArea(area_layer)

        checkAreaLimits(area_acres, 100000, 500000, feedback=feedback)
        extent = getExtent(area_layer)
        bbox_dim = createRequestBBOXDim(extent, 30)


        # NLCD Impervious Raster
        if parameters.get("NLCDImpervious", None):
            outputs["DownloadNlcdImp"] = downloadFile(
                CONUS_NLCD_SSURGO["NLCD_IMP_2019"].format(
                    epsg_code,
                    bbox_dim[0],
                    bbox_dim[1],
                    ",".join([str(item) for item in extent]),
                ),
                "https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2019_Impervious_L48/ows",
                "Error requesting land use data from 'www.mrlc.gov'. Most probably because either their server is down or there is a certification issue.\nThis should be temporary. Try again later.\n",
                context=context,
                feedback=feedback,
            )

            step += 1
            feedback.setCurrentStep(step)
            if feedback.isCanceled():
                return {}

            parameters["NLCDImpervious"].destinationName = "NLCD Impervious Surface"

            # reproject to original crs
            # Warp (reproject)
            results["NLCDImpervious"] = gdalWarp(
                outputs["DownloadNlcdImp"],
                QgsCoordinateReferenceSystem(str(orig_epsg_code)),
                parameters["NLCDImpervious"],
                context=context,
                feedback=feedback,                
            )

            step += 1
            feedback.setCurrentStep(step)
            if feedback.isCanceled():
                return {}

        # NLCD Land Cover Data
        if any([parameters.get("NLCDLandCover", None), parameters.get("CurveNumber", None)]):
            outputs["DownloadNlcdLC"] = downloadFile(
                CONUS_NLCD_SSURGO["NLCD_LC_2019"].format(
                    epsg_code,
                    bbox_dim[0],
                    bbox_dim[1],
                    ",".join([str(item) for item in extent]),
                ),
                "https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2019_Land_Cover_L48/ows",
                "Error requesting land use data from 'www.mrlc.gov'. Most probably because either their server is down or there is a certification issue.\nThis should be temporary. Try again later.\n",
                context=context,
                feedback=feedback,
            )

            step += 1
            feedback.setCurrentStep(step)
            if feedback.isCanceled():
                return {}

            parameters["NLCDLandCover"].destinationName = "NLCD Land Cover"

            # reproject to original crs
            # Warp (reproject)
            results["NLCDLandCover"] = gdalWarp(
                outputs["DownloadNlcdLC"],
                QgsCoordinateReferenceSystem(str(orig_epsg_code)),
                parameters["NLCDLandCover"],
                context=context,
                feedback=feedback,                
            )

            step += 1
            feedback.setCurrentStep(step)
            if feedback.isCanceled():
                return {}

        #     if curve_number_output == True or nlcd_vect_output == True:
        #         # Polygonize (raster to vector)
        #         alg_params = {
        #             "BAND": 1,
        #             "EIGHT_CONNECTEDNESS": False,
        #             "EXTRA": "",
        #             "FIELD": "VALUE",
        #             "INPUT": outputs["ReclassifyByTable"]["OUTPUT"],
        #             "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #         }
        #         outputs["PolygonizeRasterToVector"] = processing.run(
        #             "gdal:polygonize",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )

        #         feedback.setCurrentStep(6)
        #         if feedback.isCanceled():
        #             return {}

        #         # Fix geometries
        #         alg_params = {
        #             "INPUT": outputs["PolygonizeRasterToVector"]["OUTPUT"],
        #             "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #         }
        #         outputs["FixGeometries"] = processing.run(
        #             "native:fixgeometries",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )

        #         feedback.setCurrentStep(7)
        #         if feedback.isCanceled():
        #             return {}

        #         # Set layer style
        #         alg_params = {
        #             "INPUT": outputs["FixGeometries"]["OUTPUT"],
        #             "STYLE": os.path.join(cmd_folder, "NLCD_Vector.qml"),
        #         }
        #         try:  # for QGIS Version 3.12 and later
        #             outputs["SetLayerStyle"] = processing.run(
        #                 "native:setlayerstyle",
        #                 alg_params,
        #                 context=context,
        #                 feedback=feedback,
        #                 is_child_algorithm=True,
        #             )
        #         except:  # for QGIS Version older than 3.12
        #             outputs["SetStyleForVectorLayer"] = processing.run(
        #                 "qgis:setstyleforvectorlayer",
        #                 alg_params,
        #                 context=context,
        #                 feedback=feedback,
        #                 is_child_algorithm=True,
        #             )

        #         feedback.setCurrentStep(8)
        #         if feedback.isCanceled():
        #             return {}

        # # Soil Layer
        # if soil_output == True or curve_number_output == True:

        #     # Reproject layer
        #     alg_params = {
        #         "INPUT": parameters["aoi"],
        #         "OPERATION": "",
        #         "TARGET_CRS": QgsCoordinateReferenceSystem("EPSG:4326"),
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["ReprojectLayer4326"] = processing.run(
        #         "native:reprojectlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(9)
        #     if feedback.isCanceled():
        #         return {}

        #     # Get Area Boundary layer extent in EPSG:4326
        #     area_layer_reprojected = context.takeResultLayer(
        #         outputs["ReprojectLayer4326"]["OUTPUT"]
        #     )

        #     # Download Soil

        #     try:  # request using post rest

        #         # create vector layer structure to store data
        #         feedback.pushInfo("Creating POST request...")
        #         uri = "Polygon?crs=epsg:4326"
        #         soil_layer = QgsVectorLayer(uri, "soil layer", "memory")
        #         provider = soil_layer.dataProvider()
        #         attributes = []
        #         attr_dict = [
        #             {"name": "musym", "type": "str"},
        #             {"name": "muname", "type": "str"},
        #             {"name": "mustatus", "type": "str"},
        #             {"name": "slopegraddcp", "type": "str"},
        #             {"name": "slopegradwta", "type": "str"},
        #             {"name": "brockdepmin", "type": "str"},
        #             {"name": "wtdepannmin", "type": "str"},
        #             {"name": "wtdepaprjunmin", "type": "str"},
        #             {"name": "flodfreqdcd", "type": "str"},
        #             {"name": "flodfreqmax", "type": "str"},
        #             {"name": "pondfreqprs", "type": "str"},
        #             {"name": "aws025wta", "type": "str"},
        #             {"name": "aws050wta", "type": "str"},
        #             {"name": "aws0100wta", "type": "str"},
        #             {"name": "aws0150wta", "type": "str"},
        #             {"name": "drclassdcd", "type": "str"},
        #             {"name": "drclasswettest", "type": "str"},
        #             {"name": "hydgrpdcd", "type": "str"},
        #             {"name": "iccdcd", "type": "str"},
        #             {"name": "iccdcdpct", "type": "str"},
        #             {"name": "niccdcd", "type": "str"},
        #             {"name": "niccdcdpct", "type": "str"},
        #             {"name": "engdwobdcd", "type": "str"},
        #             {"name": "engdwbdcd", "type": "str"},
        #             {"name": "engdwbll", "type": "str"},
        #             {"name": "engdwbml", "type": "str"},
        #             {"name": "engstafdcd", "type": "str"},
        #             {"name": "engstafll", "type": "str"},
        #             {"name": "engstafml", "type": "str"},
        #             {"name": "engsldcd", "type": "str"},
        #             {"name": "engsldcp", "type": "str"},
        #             {"name": "englrsdcd", "type": "str"},
        #             {"name": "engcmssdcd", "type": "str"},
        #             {"name": "engcmssmp", "type": "str"},
        #             {"name": "urbrecptdcd", "type": "str"},
        #             {"name": "urbrecptwta", "type": "str"},
        #             {"name": "forpehrtdcp", "type": "str"},
        #             {"name": "hydclprs", "type": "str"},
        #             {"name": "awmmfpwwta", "type": "str"},
        #             {"name": "mukey", "type": "str"},
        #             {"name": "mupolygonkey", "type": "str"},
        #             {"name": "areasymbol", "type": "str"},
        #             {"name": "nationalmusym", "type": "str"},
        #         ]

        #         # initialize fields
        #         for field in attr_dict:
        #             attributes.append(QgsField(field["name"], QVariant.String))
        #             provider.addAttributes(attributes)
        #             soil_layer.updateFields()

        #         # get area layer extent polygon as WKT in 4326
        #         aoi_reproj_wkt = area_layer_reprojected.extent().asWktPolygon()

        #         # send post request
        #         body = {
        #             "format": "JSON",
        #             "query": f"select Ma.*, M.mupolygonkey, M.areasymbol, M.nationalmusym, M.mupolygongeo from mupolygon M, muaggatt Ma where M.mupolygonkey in (select * from SDA_Get_Mupolygonkey_from_intersection_with_WktWgs84('{aoi_reproj_wkt.lower()}')) and M.mukey=Ma.mukey",
        #         }
        #         url = "https://sdmdataaccess.sc.egov.usda.gov/TABULAR/post.rest"
        #         soil_response = requests.post(url, json=body).json()

        #         feedback.setCurrentStep(10)
        #         if feedback.isCanceled():
        #             return {}

        #         for row in soil_response["Table"]:
        #             # None attribute for empty data
        #             row = [None if not attr else attr for attr in row]
        #             feat = QgsFeature(soil_layer.fields())
        #             # populate data
        #             for index, col in enumerate(row):
        #                 if index != len(attr_dict):
        #                     feat.setAttribute(attr_dict[index]["name"], col)
        #                 else:
        #                     feat.setGeometry(QgsGeometry.fromWkt(col))
        #             provider.addFeatures([feat])

        #         feedback.setCurrentStep(11)
        #         if feedback.isCanceled():
        #             return {}

        #     except:  # try wfs request
        #         feedback.reportError(
        #             "Error getting soil data through post request. Your input layer maybe too large. Trying WFS download now.\nIf the Algorithm get stuck during download. Terminate the Algorithm and rerun with a smaller input layer.",
        #             False,
        #         )
        #         xmin_reprojected = area_layer_reprojected.extent().xMinimum()
        #         ymin_reprojected = area_layer_reprojected.extent().yMinimum()
        #         xmax_reprojected = area_layer_reprojected.extent().xMaximum()
        #         ymax_reprojected = area_layer_reprojected.extent().yMaximum()

        #         request_URL_soil = f"https://sdmdataaccess.sc.egov.usda.gov/Spatial/SDMWGS84GEOGRAPHIC.wfs?SERVICE=WFS&VERSION=1.1.0&REQUEST=GetFeature&TYPENAME=mapunitpolyextended&SRSNAME=EPSG:4326&BBOX={str(xmin_reprojected)},{str(ymin_reprojected)},{str(xmax_reprojected)},{str(ymax_reprojected)}"

        #         alg_params = {
        #             "URL": request_URL_soil,
        #             "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #         }
        #         outputs["DownloadSoil"] = processing.run(
        #             "native:filedownloader",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )

        #         feedback.setCurrentStep(12)
        #         if feedback.isCanceled():
        #             return {}

        #         # Swap X and Y coordinates
        #         alg_params = {
        #             "INPUT": outputs["DownloadSoil"]["OUTPUT"],
        #             "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #         }
        #         outputs["SwapXAndYCoordinates"] = processing.run(
        #             "native:swapxy",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )

        #         feedback.setCurrentStep(13)
        #         if feedback.isCanceled():
        #             return {}

        #         soil_layer = outputs["SwapXAndYCoordinates"]["OUTPUT"]

        #     # Fix soil layer geometries
        #     alg_params = {"INPUT": soil_layer, "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT}
        #     outputs["FixGeometries2"] = processing.run(
        #         "native:fixgeometries",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(14)
        #     if feedback.isCanceled():
        #         return {}

        #     # Clip Soil Layer
        #     alg_params = {
        #         "INPUT": outputs["FixGeometries2"]["OUTPUT"],
        #         "OVERLAY": parameters["aoi"],
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["Clip"] = processing.run(
        #         "native:clip",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(15)
        #     if feedback.isCanceled():
        #         return {}

        #     # Reproject Soil
        #     alg_params = {
        #         "INPUT": outputs["Clip"]["OUTPUT"],
        #         "OPERATION": "",
        #         "TARGET_CRS": QgsCoordinateReferenceSystem(origepsg_code),
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["ReprojectSoil"] = processing.run(
        #         "native:reprojectlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(16)
        #     if feedback.isCanceled():
        #         return {}

        #     # Fix soil layer geometries second time
        #     alg_params = {
        #         "INPUT": outputs["ReprojectSoil"]["OUTPUT"],
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["FixGeometries3"] = processing.run(
        #         "native:fixgeometries",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(17)
        #     if feedback.isCanceled():
        #         return {}

        #     # Set layer style
        #     alg_params = {
        #         "INPUT": outputs["FixGeometries3"]["OUTPUT"],
        #         "STYLE": os.path.join(cmd_folder, "Soil_Layer.qml"),
        #     }
        #     try:  # for QGIS Version 3.12 and later
        #         outputs["SetLayerStyle"] = processing.run(
        #             "native:setlayerstyle",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )
        #     except:  # for QGIS Version older than 3.12
        #         outputs["SetStyleForVectorLayer"] = processing.run(
        #             "qgis:setstyleforvectorlayer",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )

        #     feedback.setCurrentStep(18)
        #     if feedback.isCanceled():
        #         return {}

        # # Curve Number Calculations
        # if curve_number_output == True:

        #     feedback.pushInfo(
        #         "Generating Curve Number Layer. This may take a while. Do not cancel."
        #     )
        #     # Intersection
        #     alg_params = {
        #         "INPUT": outputs["FixGeometries3"]["OUTPUT"],
        #         "INPUT_FIELDS": ["MUSYM", "HYDGRPDCD", "MUNAME"],
        #         "OVERLAY": outputs["FixGeometries"]["OUTPUT"],
        #         "OVERLAY_FIELDS": ["VALUE"],
        #         "OVERLAY_FIELDS_PREFIX": "",
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["Intersection"] = processing.run(
        #         "native:intersection",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(19)
        #     if feedback.isCanceled():
        #         return {}

        #     # Create GDCodeTemp
        #     alg_params = {
        #         "FIELD_LENGTH": 5,
        #         "FIELD_NAME": "GDCodeTemp",
        #         "FIELD_PRECISION": 3,
        #         "FIELD_TYPE": 2,
        #         "FORMULA": 'IF ("HYDGRPDCD" IS NOT NULL, "Value" || "HYDGRPDCD", IF (("MUSYM" = \'W\' OR lower("MUSYM") = \'water\' OR lower("MUNAME") = \'water\' OR "MUNAME" = \'W\'), 11, "VALUE"))',
        #         "INPUT": outputs["Intersection"]["OUTPUT"],
        #         "NEW_FIELD": True,
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["CreateGdcodetemp"] = processing.run(
        #         "qgis:fieldcalculator",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(20)
        #     if feedback.isCanceled():
        #         return {}

        #     # Create GDCode
        #     alg_params = {
        #         "FIELD_LENGTH": 5,
        #         "FIELD_NAME": "GDCode",
        #         "FIELD_PRECISION": 3,
        #         "FIELD_TYPE": 2,
        #         "FORMULA": "if( var('drainedsoilsleaveuncheckedifnotsure') = True,replace(\"GDCodeTemp\", '/D', ''),replace(\"GDCodeTemp\", map('A/', '', 'B/', '', 'C/', '')))",
        #         "INPUT": outputs["CreateGdcodetemp"]["OUTPUT"],
        #         "NEW_FIELD": True,
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["CreateGdcode"] = processing.run(
        #         "qgis:fieldcalculator",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(21)
        #     if feedback.isCanceled():
        #         return {}

        #     # Create NLCD_LU
        #     alg_params = {
        #         "FIELD_LENGTH": 2,
        #         "FIELD_NAME": "NLCD_LU",
        #         "FIELD_PRECISION": 3,
        #         "FIELD_TYPE": 1,
        #         "FORMULA": '"Value"',
        #         "INPUT": outputs["CreateGdcode"]["OUTPUT"],
        #         "NEW_FIELD": True,
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["CreateNlcd_lu"] = processing.run(
        #         "qgis:fieldcalculator",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(22)
        #     if feedback.isCanceled():
        #         return {}

        #     # Join with CnLookup
        #     alg_params = {
        #         "DISCARD_NONMATCHING": False,
        #         "FIELD": "GDCode",
        #         "FIELDS_TO_COPY": ["CN_Join"],
        #         "FIELD_2": "GDCode",
        #         "INPUT": outputs["CreateNlcd_lu"]["OUTPUT"],
        #         "INPUT_2": parameters["CnLookup"],
        #         "METHOD": 1,
        #         "PREFIX": "",
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["JoinWithCnLookup"] = processing.run(
        #         "native:joinattributestable",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(23)
        #     if feedback.isCanceled():
        #         return {}

        #     # Create Integer CN
        #     alg_params = {
        #         "FIELD_LENGTH": 3,
        #         "FIELD_NAME": "CN",
        #         "FIELD_PRECISION": 0,
        #         "FIELD_TYPE": 1,
        #         "FORMULA": "CN_Join  * 1",
        #         "INPUT": outputs["JoinWithCnLookup"]["OUTPUT"],
        #         "NEW_FIELD": True,
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["CreateIntegerCn"] = processing.run(
        #         "qgis:fieldcalculator",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(24)
        #     if feedback.isCanceled():
        #         return {}

        #     # Drop field(s)
        #     alg_params = {
        #         "COLUMN": ["VALUE", "GDCodeTemp", "CN_Join"],
        #         "INPUT": outputs["CreateIntegerCn"]["OUTPUT"],
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["DropFields"] = processing.run(
        #         "qgis:deletecolumn",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        #     feedback.setCurrentStep(25)
        #     if feedback.isCanceled():
        #         return {}

        #     # Set layer style
        #     alg_params = {
        #         "INPUT": outputs["DropFields"]["OUTPUT"],
        #         "STYLE": os.path.join(cmd_folder, "CN_Grid.qml"),
        #     }
        #     try:  # for QGIS Version 3.12 and later
        #         outputs["SetLayerStyle"] = processing.run(
        #             "native:setlayerstyle",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )
        #     except:  # for QGIS Version older than 3.12
        #         outputs["SetStyleForVectorLayer"] = processing.run(
        #             "qgis:setstyleforvectorlayer",
        #             alg_params,
        #             context=context,
        #             feedback=feedback,
        #             is_child_algorithm=True,
        #         )

        # if nlcd_rast_output:
        #     # Load NLCD Raster into project
        #     alg_params = {
        #         "INPUT": outputs["ReclassifyByTable"]["OUTPUT"],
        #         "NAME": "NLCD Land Cover Raster",
        #     }
        #     outputs["LoadLayerIntoProject1"] = processing.run(
        #         "native:loadlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        # if nlcd_vect_output:
        #     # Load NLCD Vector Layer into project
        #     alg_params = {
        #         "INPUT": outputs["FixGeometries"]["OUTPUT"],
        #         "NAME": "NLCD Land Cover Vector",
        #     }
        #     outputs["LoadLayerIntoProject2"] = processing.run(
        #         "native:loadlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        # if nlcd_rast_imp_output:
        #     # Load NLCD Impervious Raster into project
        #     alg_params = {
        #         "INPUT": outputs["DownloadNlcdImp"]["OUTPUT"],
        #         "NAME": "NLCD Impervious Raster",
        #     }
        #     outputs["LoadLayerIntoProject3"] = processing.run(
        #         "native:loadlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        # if soil_output:
        #     # Load Soil Layer into project
        #     alg_params = {
        #         "INPUT": outputs["FixGeometries3"]["OUTPUT"],
        #         "NAME": "SSURGO Soil Layer",
        #     }
        #     outputs["LoadLayerIntoProject4"] = processing.run(
        #         "native:loadlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        # if curve_number_output:
        #     # Load Curve Number Layer into project
        #     alg_params = {
        #         "INPUT": outputs["DropFields"]["OUTPUT"],
        #         "NAME": "Curve Number Layer",
        #     }
        #     outputs["LoadLayerIntoProject5"] = processing.run(
        #         "native:loadlayer",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )

        # # log usage
        # with open(cn_log_path, "r+") as f:
        #     counter = int(f.readline())
        #     f.seek(0)
        #     f.write(str(counter + 1))

        # # check if counter is milestone
        # if (counter + 1) % 25 == 0:
        #     appeal_file = NamedTemporaryFile("w", suffix=".html", delete=False)
        #     self.createHTML(appeal_file.name, counter + 1)
        #     results["Message"] = appeal_file.name

        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "CONUS (NLCD & SSURGO)"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, "icon.png")))
        return icon

    def shortHelpString(self):
        return """<html><body><a "href"="https://github.com/ar-siddiqui/curve_number_generator/wiki/Tutorials">Video Tutorials</a></h3>
<h2>Algorithm description</h2>
<p>This algorithm generates Curve Number layer for the given Area of Interest within the contiguous United States. It can also download Soil, Land Cover, and Impervious Surface datasets for the same area.</p>
<h2>Input parameters</h2>
<h3>Area Boundary</h3>
<p>Area of Interest</p>
<h3>CN_Lookup.csv [optional]</h3>
<p>Optional Table to relate NLCD Land Use Value and HSG Value to a particular curve number. By default the algorithm uses pre defined table. The table must have two columns 'GDCode' and 'CN_Join'. GDCode is concatenation of NLCD Land Use code and Hydrologic Soil Group. <a href="https://raw.githubusercontent.com/ar-siddiqui/curve_number_generator/development/CN_Lookup.csv">Template csv file to create custom table.</a></p>
<h3>Drained Soils? [leave unchecked if not sure]</h3>
<p>Certain Soils are categorized as dual category in SSURGO dataset. They have Hydrologic Soil Group D for Undrained Conditions and Hydrologic Soil Group A/B/C for Drained Conditions.

If left unchecked, the algorithm will assume HSG D for all dual category soils. 

If checked the algorithm will assume HSG A/B/C for each dual category soil.</p>
<h2>Outputs</h2>
<h3>NLCD Land Cover Vector</h3>
<p>NLCD 2019 Land Cover Dataset Vectorized</p>
<h3>NLCD Land Cover Raster</h3>
<p>NLCD 2019 Land Cover Dataset</p>
<h3>NLCD Impervious Surface Raster</h3>
<p>NLCD 2019 Impervious Surface Dataset</p>
<h3>Soil Layer</h3>
<p>SSURGO Extended Soil Dataset </p>
<h3>Curve Number Layer</h3>
<p>Generated Curve Number Layer based on Land Cover and HSG values.</p>
<br><p align="right">Algorithm author: Abdul Raheem Siddiqui</p><p align="right">Help author: Abdul Raheem Siddiqui</p><p align="right">Algorithm version: 1.3</p><p align="right">Contact email: ars.work.ce@gmail.com</p><p>Disclaimer: The curve numbers generated with this algorithm are high level estimates and should be reviewed in detail before being used for detailed modeling or construction projects.</p></body></html>"""

    def createInstance(self):
        return ConusNlcdSsurgo()

    def createHTML(self, outputFile, counter):
        with codecs.open(outputFile, "w", encoding="utf-8") as f:
            f.write(
                f"""
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
</head>

<body>
    <p style="font-size:21px;line-height: 1.5;text-align:center;"><br>WOW! You have used the Curve Number Generator
        Plugin <b>{counter}</b>
        times already.<br />If you would like to get any GIS task automated for your organization please contact me at
        ars.work.ce@gmail.com<br />
        If this plugin has saved your time, please consider making a personal or organizational donation of any value to
        the developer.</p>
    <br>
    <form action="https://www.paypal.com/donate" method="post" target="_top" style="text-align: center;">
        <input type="hidden" name="business" value="T25JMRWJAL5SQ" />
        <input type="hidden" name="item_name" value="For Curve Number Generator" />
        <input type="hidden" name="currency_code" value="USD" />
        <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit"
            title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
        <img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
    </form>
</body>

</html>"""
            )
