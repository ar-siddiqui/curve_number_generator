# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CurveNumberGenerator
                                 A QGIS plugin
 This plugin generates a Curve Number layer for the given Area of Interest within the contiguous United States. It can also download Soil, Land Cover, and Impervious Surface datasets for the same area.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-22
        copyright            : (C) 2022 by Abdul Raheem Siddiqui
        email                : ars.work.ce@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import inspect
import os
import sys

import processing

from curve_number_generator.processing.config import GLOBAL_ESA_ISRIC, PLUGIN_VERSION
from curve_number_generator.processing.curve_number_generator_algorithm import (
    CurveNumberGeneratorAlgorithm,
)
from curve_number_generator.processing.tools.curve_numper import CurveNumber
from curve_number_generator.processing.tools.utils import (
    createDefaultLookup,
    createRequestBBOXDim,
    gdalWarp,
    getExtentInEPSG4326,
    reprojectLayer,
    getAndUpdateMessage,
)

from qgis.core import (
    QgsCoordinateReferenceSystem,
    QgsProcessing,
    QgsProcessingMultiStepFeedback,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterDefinition,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterRasterDestination,
    QgsProcessingParameterVectorDestination,
    QgsProcessingParameterVectorLayer,
    QgsProcessingParameterEnum,
)
from qgis.PyQt.QtGui import QIcon

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

__author__ = "Abdul Raheem Siddiqui"
__date__ = "2022-07-22"
__copyright__ = "(C) 2022 by Abdul Raheem Siddiqui"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"


class GlobalEsaIsric(CurveNumberGeneratorAlgorithm):
    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = "OUTPUT"
    INPUT = "INPUT"

    def initAlgorithm(self, config=None):

        self.hc = ["Poor", "Fair", "Good"]
        self.arc = ["I", "II", "III"]

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                "aoi",
                "Area of Interest",
                types=[QgsProcessing.TypeVectorPolygon],
                defaultValue=None,
            )
        )

        param = QgsProcessingParameterVectorLayer(
            "CnLookup",
            "Lookup Table",
            optional=True,
            types=[QgsProcessing.TypeVector],
            defaultValue="",
        )
        param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(param)

        param = QgsProcessingParameterEnum(
            "HC",
            "Hydrologic Condition [Ignored when custom lookup table is provided]",
            options=self.hc,
            allowMultiple=False,
            defaultValue=1,
        )
        param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(param)

        param = QgsProcessingParameterEnum(
            "ARC",
            "Anticedent Runoff Condition [Ignored when custom lookup table is provided]",
            options=self.arc,
            allowMultiple=False,
            defaultValue=1,
        )

        param.setFlags(param.flags() | QgsProcessingParameterDefinition.FlagAdvanced)
        self.addParameter(param)

        self.addParameter(
            QgsProcessingParameterRasterDestination(
                "ESALandCover",
                "ESA Land Cover",
                optional=True,
                createByDefault=False,
                defaultValue=None,
            )
        )
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                "Soils",
                "ISRIC Derived HSG",
                optional=True,
                createByDefault=False,
                defaultValue=None,
            )
        )
        # self.addParameter(
        #     QgsProcessingParameterRasterDestination(
        #         "CurveNumber",
        #         "Curve Number",
        #         optional=True,
        #         createByDefault=False,
        #         defaultValue=None,
        #     )
        # )
        # self.addParameter(
        #     QgsProcessingParameterVectorDestination(
        #         "CurveNumberVector",
        #         "Curve Number (Vectorized)",
        #         optional=True,
        #         createByDefault=False,
        #         defaultValue=None,
        #     )
        # )

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(6, model_feedback)
        results = {}
        outputs = {}

        # Assiging Default CN_Lookup Table
        if not parameters.get("CnLookup", None):
            index_hc = self.parameterAsInt(parameters, "HC", context)
            index_arc = self.parameterAsInt(parameters, "ARC", context)
            parameters["CnLookup"] = (
                createDefaultLookup(
                    os.path.join(cmd_folder, "lookups"),
                    f"default_lookup_{(self.hc[index_hc][:1].lower())}_{(self.arc[index_arc][:1].lower())}.csv",
                ),
            )

        aoi_layer = self.parameterAsVectorLayer(parameters, "aoi", context)

        extent = getExtentInEPSG4326(aoi_layer)
        # add a buffer cell on each side, refer to #49 for reasoning
        extent_esa = (
            extent[0] - 0.000083333333333,
            extent[1] - 0.000083333333333,
            extent[2] + 0.000083333333333,
            extent[3] + 0.000083333333333,
        )
        extent_isric = (
            extent[0] - 0.0026,
            extent[1] - 0.0026,
            extent[2] + 0.0026,
            extent[3] + 0.0026,
        )

        step = 1
        feedback.setCurrentStep(step)
        if feedback.isCanceled():
            return {}

        if any(
            [
                parameters.get("ESALandCover", None),
                parameters.get("CurveNumber", None),
                parameters.get("CurveNumberVector", None),
            ]
        ):
            # ESA Land Cover Data
            if parameters.get("ESALandCover", None):
                try:
                    parameters["ESALandCover"].destinationName = "ESA Land Cover"
                except AttributeError:
                    pass

            alg_params = {
                "DATA_TYPE": 0,
                "EXTRA": "",
                "INPUT": os.path.join(cmd_folder, "esa_worldcover_2021.vrt"),
                "NODATA": None,
                "OPTIONS": "",
                "PROJWIN": f"{extent_esa[0]},{extent_esa[2]},{extent_esa[1]},{extent_esa[3]} [EPSG:4326]",
                "OUTPUT": parameters["ESALandCover"],
            }
            outputs["ESALandCover"] = processing.run(
                "gdal:cliprasterbyextent",
                alg_params,
                context=context,
                feedback=feedback,
                is_child_algorithm=True,
            )["OUTPUT"]

            step += 1
            feedback.setCurrentStep(step)
            if feedback.isCanceled():
                return {}

            if parameters.get("ESALandCover", None):
                lc_style_path = os.path.join(cmd_folder, "esa_land_cover.qml")
                results["ESALandCover"] = outputs["ESALandCover"]
                self.handle_post_processing(
                    results["ESALandCover"], lc_style_path, context
                )

        # Soil Layer
        if any(
            [
                parameters.get("Soils", None),
                parameters.get("CurveNumber", None),
                parameters.get("CurveNumberVector", None),
            ]
        ):

            alg_params = {
                "DATA_TYPE": 0,
                "EXTRA": "",
                "INPUT": GLOBAL_ESA_ISRIC["ISRIC_CLAY"],
                "NODATA": None,
                "OPTIONS": "",
                "PROJWIN": f"{extent_isric[0]},{extent_isric[2]},{extent_isric[1]},{extent_isric[3]} [EPSG:4326]",
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
            }
            outputs["IsricClay"] = processing.run(
                "gdal:cliprasterbyextent",
                alg_params,
                context=context,
                feedback=feedback,
                is_child_algorithm=True,
            )["OUTPUT"]

            step += 1
            feedback.setCurrentStep(step)
            if feedback.isCanceled():
                return {}

            # reproject to 4326
            outputs["IsricClay4326"] = gdalWarp(
                outputs["IsricClay"],
                QgsCoordinateReferenceSystem("EPSG:4326"),
                context=context,
                feedback=feedback,
            )

        #     # Call class method in required sequence
        #     ssurgoSoil.reprojectTo4326()
        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     try:
        #         ssurgoSoil.postRequest()
        #         step += 1
        #         feedback.setCurrentStep(step)
        #         if feedback.isCanceled():
        #             return {}
        #     except:
        #         feedback.pushWarning(
        #             "Error getting soil data through post request. Your input layer maybe too large. Trying WFS download now.\nIf the Algorithm get stuck during download. Terminate the Algorithm and rerun with a smaller input layer."
        #         )
        #         ssurgoSoil.wfsRequest()
        #         step += 1
        #         feedback.setCurrentStep(step)
        #         if feedback.isCanceled():
        #             return {}

        #         # SSURGO wfs is misconfigured to return x as y and y and x
        #         ssurgoSoil.swapXY()
        #         step += 1
        #         feedback.setCurrentStep(step)
        #         if feedback.isCanceled():
        #             return {}

        #     ssurgoSoil.fixSoilLayer()
        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     ssurgoSoil.clipSoilLayer()
        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     outputs["Soils4326"] = ssurgoSoil.soil_layer
        #     outputs["ReprojectedSoils"] = reprojectLayer(
        #         outputs["Soils4326"],
        #         QgsCoordinateReferenceSystem(str(orig_epsg_code)),
        #         context=context,
        #         feedback=feedback,
        #     )
        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     # final result
        #     if parameters.get("Soils", None):
        #         try:
        #             parameters["Soils"].destinationName = "SSURGO Soils"
        #         except AttributeError:
        #             pass
        #         soils_output = parameters["Soils"]
        #     else:
        #         soils_output = QgsProcessing.TEMPORARY_OUTPUT

        #     outputs["Soils"] = fixGeometries(
        #         outputs["ReprojectedSoils"],
        #         soils_output,
        #         context=context,
        #         feedback=feedback,
        #     )
        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     if parameters.get("Soils", None):
        #         soils_style_path = os.path.join(cmd_folder, "soils.qml")
        #         results["Soils"] = outputs["Soils"]
        #         self.handle_post_processing(results["Soils"], soils_style_path, context)

        # # # Curve Number Calculations
        # if parameters.get("CurveNumber", None):
        #     # Prepare Land Cover for Curve Number Calculation
        #     # Polygonize (raster to vector)
        #     outputs["NLCDLandCoverPolygonize"] = gdalPolygonize(
        #         outputs["NLCDLandCover"],
        #         "land_cover",
        #         context=context,
        #         feedback=feedback,
        #     )

        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     # Fix geometries
        #     outputs["NLCDLandCoverVector"] = fixGeometries(
        #         outputs["NLCDLandCoverPolygonize"], context=context, feedback=feedback
        #     )

        #     # Prepare Soil for Curve Number Calculation by turning dual soil to single soil
        #     if parameters["DrainedSoils"]:
        #         single_soil_formula = "replace(\"HYDGRPDCD\", '/D', '')"
        #     else:
        #         single_soil_formula = (
        #             "replace(\"HYDGRPDCD\", map('A/', '', 'B/', '', 'C/', ''))"
        #         )
        #     alg_params = {
        #         "FIELD_LENGTH": 5,
        #         "FIELD_NAME": "_hsg_single_",
        #         "FIELD_PRECISION": 3,
        #         "FIELD_TYPE": 2,
        #         "FORMULA": single_soil_formula,
        #         "INPUT": outputs["Soils"],
        #         "NEW_FIELD": True,
        #         "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
        #     }
        #     outputs["SoilsSingle"] = processing.run(
        #         "qgis:fieldcalculator",
        #         alg_params,
        #         context=context,
        #         feedback=feedback,
        #         is_child_algorithm=True,
        #     )["OUTPUT"]

        #     curve_number = CurveNumber(
        #         outputs["NLCDLandCoverVector"],
        #         outputs["SoilsSingle"],
        #         parameters["CnLookup"],
        #         context=context,
        #         feedback=feedback,
        #     )

        #     try:
        #         parameters["CurveNumber"].destinationName = "Curve Number"
        #     except AttributeError:
        #         pass

        #     results["CurveNumber"], step = curve_number.generateCurveNumber(
        #         ["MUSYM", "HYDGRPDCD", "MUNAME", "_hsg_single_"],
        #         ["MUSYM", "MUNAME", "_hsg_single_"],
        #         'IF ("_hsg_single_" IS NOT NULL, "land_cover" || \'_\' ||  "_hsg_single_", IF (("MUSYM" = \'W\' OR lower("MUSYM") = \'water\' OR lower("MUNAME") = \'water\' OR "MUNAME" = \'W\'), \'11_\', "land_cover" || \'_\'))',
        #         start_step=step + 1,
        #         output=parameters["CurveNumber"],
        #     )

        #     step += 1
        #     feedback.setCurrentStep(step)
        #     if feedback.isCanceled():
        #         return {}

        #     cn_style_path = os.path.join(
        #         os.path.dirname(cmd_folder), "curve_number.qml"
        #     )
        #     self.handle_post_processing(results["CurveNumber"], cn_style_path, context)

        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "globalesaisric"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr("Curve Number Generator (Global) (ESA & ISRIC)")

    def icon(self):
        icon = QIcon(os.path.join(cmd_folder, "icon.png"))
        return icon

    def shortHelpString(self):
        msg = ""
        try:
            msg = getAndUpdateMessage()
        except Exception as e:
            print(e)

        return (
            msg
            + f"""<html><body><a "href"="https://github.com/ar-siddiqui/curve_number_generator/wiki/Tutorials#curve-number-generator-conus-nlcd--ssurgo">Video Tutorial</a></h3>
<h2>Algorithm description</h2>
<p>This algorithm generates Curve Number layer for the given Area of Interest within the contiguous United States. It can also download Soil, Land Cover, and Impervious Surface datasets for the same area.</p>
<h2>Input parameters</h2>
<h3>Area of Interest</h3>
<p>Polygon layer representing area of interest</p>
<h3>Lookup Table [optional]</h3>
<p>Optional Table to relate NLCD Land Use Value and HSG Value to a particular curve number. By default the algorithm uses pre defined table. The table must have two columns 'grid_code' and 'cn'. grid_code is concatenation of NLCD Land Use code and Hydrologic Soil Group. <a href="https://raw.githubusercontent.com/ar-siddiqui/curve_number_generator/v{PLUGIN_VERSION}/curve_number_generator/processing/algorithms/conus_nlcd_ssurgo/default_lookup.csv">Template csv file to create custom table</a> (add an optional <a href="https://raw.githubusercontent.com/ar-siddiqui/curve_number_generator/v{PLUGIN_VERSION}/curve_number_generator/processing/algorithms/conus_nlcd_ssurgo/default_lookup.csvt">`.csvt`</a> file to control column data types).</p>
<h3>Drained Soils? [leave unchecked if not sure]</h3>
<p>Certain Soils are categorized as dual category in SSURGO dataset. They have Hydrologic Soil Group D for Undrained Conditions and Hydrologic Soil Group A/B/C for Drained Conditions.

If left unchecked, the algorithm will assume HSG D for all dual category soils.

If checked the algorithm will assume HSG A/B/C for each dual category soil.</p>
<h2>Outputs</h2>
<h3>NLCD Land Cover</h3>
<p>NLCD 2021 Land Cover Raster</p>
<h3>NLCD Impervious Surface</h3>
<p>NLCD 2021 Impervious Surface Raster</p>
<h3>Soils</h3>
<p>SSURGO Extended Soil Dataset </p>
<h3>Curve Number</h3>
<p>Generated Curve Number Layer based on Land Cover and HSG values.</p>
<br><p align="right">Algorithm author: Abdul Raheem Siddiqui</p><p align="right">Help author: Abdul Raheem Siddiqui</p><p align="right">Algorithm version: {PLUGIN_VERSION}</p><p align="right">Contact email: ars.work.ce@gmail.com</p><p>Disclaimer: The curve numbers generated with this algorithm are high level estimates and should be reviewed in detail before being used for detailed modeling or construction projects.</p></body></html>"""
        )

    def createInstance(self):
        return GlobalEsaIsric()
